name: Continuous Integration

permissions:
  contents: read
  id-token: write
  pull-requests: write

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  FUNCTION_NAME: "python-lambda-assistant"
  PYTHON_VERSION: "3.12"
  AWS_REGION: "us-west-1"
  AWS_ACCOUNT_ID: "670469590993"
  GH_OIDC_ROLE_NAME: "github-jirehhuang-oidc-lambda-deployer"
  MEALIE_API_URL: ${{ secrets.MEALIE_API_URL }}
  MEALIE_API_KEY: ${{ secrets.MEALIE_API_KEY }}
  MEALIE_SHOPPING_LIST_ID: ${{ secrets.MEALIE_SHOPPING_LIST_ID }}
  OBSIDIAN_VAULT_OWNER: ${{ secrets.OBSIDIAN_VAULT_OWNER }}
  OBSIDIAN_VAULT_REPOSITORY: ${{ secrets.OBSIDIAN_VAULT_REPOSITORY }}
  OBSIDIAN_VAULT_TOKEN: ${{ secrets.OBSIDIAN_VAULT_TOKEN }}
  OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

jobs:
  pr-title:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: amannn/action-semantic-pull-request@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          requireScope: false

  lint-and-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: "2.2.1"

      - name: Install dependencies
        run: poetry install

      - name: Run pre-commit
        run: poetry run pre-commit run --all-files

      - name: Run pylint
        run: |
          SCORE=$(poetry run pylint lambda_function --exit-zero --score=y | grep "Your code has been rated at" | awk '{print $7}' | cut -d'/' -f1)
          echo "Pylint score: $SCORE"
          if [ -n "$SCORE" ] && ! python -c "exit(0 if float('$SCORE') >= 10.0 else 1)"; then
            echo "❌ ERROR: Pylint score < 10.0"
            exit 1
          fi

      - name: Run tests
        run: poetry run pytest

      - name: Check coverage
        run: poetry run python .github/scripts/check_coverage.py --min 95 coverage.xml

  build-and-push:
    needs: [lint-and-tests]
    runs-on: ubuntu-latest
    concurrency:
      group: lambda-deploy
      cancel-in-progress: true

    permissions:
      id-token: write
      contents: read

    outputs:
      image_uri: ${{ steps.build-image.outputs.image_uri }}

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: "2.2.1"

      - name: Install deps for packaging
        run: poetry install --only main

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.GH_OIDC_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repository exists
        run: |
          set -euo pipefail
          if ! aws ecr describe-repositories --repository-names "${FUNCTION_NAME}" >/dev/null 2>&1; then
            echo "Creating ECR repository ${FUNCTION_NAME}"
            aws ecr create-repository --repository-name "${FUNCTION_NAME}"
          else
            echo "ECR repository ${FUNCTION_NAME} already exists"
          fi

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        id: build-image
        run: |
          set -euo pipefail
          IMAGE_TAG=${GITHUB_SHA::7}
          ECR_URI="${{ steps.login-ecr.outputs.registry }}/${FUNCTION_NAME}:${IMAGE_TAG}"
          echo "Building Docker image ${ECR_URI}"
          docker build -t "${ECR_URI}" .
          docker push "${ECR_URI}"
          echo "image_uri=${ECR_URI}" >> "$GITHUB_OUTPUT"

  lambda-deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    concurrency:
      group: lambda-deploy
      cancel-in-progress: true

    permissions:
      id-token: write
      contents: read

    outputs:
      api_url: ${{ steps.get-api-url.outputs.api_url }}

    steps:
      - uses: actions/checkout@v5

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.GH_OIDC_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure Lambda function exists
        run: |
          set -euo pipefail
          ROLE_NAME="${FUNCTION_NAME}-role"
          IMAGE_URI=${{ needs.build-and-push.outputs.image_uri }}

          if ! aws lambda get-function --function-name "${FUNCTION_NAME}" >/dev/null 2>&1; then
            echo "Creating Lambda function ${FUNCTION_NAME} with image ${IMAGE_URI}"
            aws lambda create-function \
              --function-name "${FUNCTION_NAME}" \
              --package-type Image \
              --code ImageUri="${IMAGE_URI}" \
              --role "arn:aws:iam::${AWS_ACCOUNT_ID}:role/${ROLE_NAME}"

            echo "Waiting for Lambda update..."
            aws lambda wait function-updated --function-name "${FUNCTION_NAME}"

            echo "✅ Lambda function ${FUNCTION_NAME} successfully created."
          else
            echo "✅ Lambda function ${FUNCTION_NAME} already exists"
          fi

      - name: Update Lambda function to new image
        run: |
          set -euo pipefail
          IMAGE_URI=${{ needs.build-and-push.outputs.image_uri }}

          echo "Checking package type for ${FUNCTION_NAME}..."
          PACKAGE_TYPE=$(aws lambda get-function-configuration \
            --function-name "${FUNCTION_NAME}" \
            --query 'PackageType' \
            --output text)

          if [ "$PACKAGE_TYPE" != "Image" ]; then
            echo "❌ ERROR: Lambda function ${FUNCTION_NAME} is currently using package type '${PACKAGE_TYPE}'."
            echo "It must be recreated as an Image-based Lambda before deployment."
            echo "Please delete it manually and rerun this workflow:"
            echo "  aws lambda delete-function --function-name ${FUNCTION_NAME}"
            exit 1
          fi

          echo "Updating Lambda ${FUNCTION_NAME} with new image ${IMAGE_URI}..."
          aws lambda update-function-code \
            --function-name "${FUNCTION_NAME}" \
            --image-uri "${IMAGE_URI}"

          echo "Waiting for Lambda update..."
          aws lambda wait function-updated --function-name "${FUNCTION_NAME}"

          echo "✅ Lambda update complete."

      - name: Set environment variables and alias
        id: env-vars
        env:
          ENV_VARS: "MEALIE_API_URL,MEALIE_API_KEY,MEALIE_SHOPPING_LIST_ID,OBSIDIAN_VAULT_OWNER,OBSIDIAN_VAULT_REPOSITORY,OBSIDIAN_VAULT_TOKEN,OPENROUTER_API_KEY"
        run: |
          set -euo pipefail

          # Determine alias
          BRANCH="${GITHUB_REF_NAME}"
          ALIAS="staging"
          [ "$BRANCH" = "main" ] && ALIAS="prod"

          # Start JSON with function name and alias
          ENV_JSON=$(jq -n --arg fn "$FUNCTION_NAME" --arg alias "$ALIAS" \
            '{FunctionName: $fn, Environment: {Variables: {ALIAS: $alias}}}')

          # Add other environment variables dynamically
          IFS=',' read -ra VARS <<< "$ENV_VARS"
          for VAR in "${VARS[@]}"; do
              VALUE=$(printenv "$VAR")
              # Escape quotes in VALUE
              VALUE_ESCAPED=$(echo "$VALUE" | sed 's/"/\\"/g')
              ENV_JSON=$(echo "$ENV_JSON" | jq --arg k "$VAR" --arg v "$VALUE_ESCAPED" '.Environment.Variables[$k]=$v')
          done

          echo "Updating Lambda environment variables:"
          aws lambda update-function-configuration \
            --cli-input-json "$ENV_JSON"

          echo "alias=${ALIAS}" >> "$GITHUB_OUTPUT"

          echo "Waiting for Lambda update..."
          aws lambda wait function-updated --function-name "${FUNCTION_NAME}"

          echo "✅ Lambda environment variables updated."

      - name: Publish new version and update alias
        run: |
          set -euo pipefail
          ALIAS=${{ steps.env-vars.outputs.alias }}

          VERSION=$(aws lambda publish-version --function-name "${FUNCTION_NAME}" --query 'Version' --output text)

          if ! aws lambda get-alias --function-name "${FUNCTION_NAME}" --name "${ALIAS}" >/dev/null 2>&1; then
            aws lambda create-alias \
              --function-name "${FUNCTION_NAME}" \
              --name "${ALIAS}" \
              --function-version "${VERSION}"
          else
            aws lambda update-alias \
              --function-name "${FUNCTION_NAME}" \
              --name "${ALIAS}" \
              --function-version "${VERSION}"
          fi

          echo "✅ Updated ${ALIAS} alias to version ${VERSION}"

      - name: Get API URL
        id: get-api-url
        run: |
          set -euo pipefail
          API_NAME="${FUNCTION_NAME}-api-${{ steps.env-vars.outputs.alias }}"

          api_id=$(aws apigateway get-rest-apis \
            --query "items[?name=='${API_NAME}'].id" \
            --output text)

          if [ -z "$api_id" ] || [ "$api_id" = "None" ]; then
            echo "❌ API Gateway for ${API_NAME} does not exist. Please create it and re-run this job."
            exit 1
          fi

          url="https://${api_id}.execute-api.${AWS_REGION}.amazonaws.com"
          echo "api_url=$url" >> "$GITHUB_OUTPUT"

  e2e-tests:
    needs: [lambda-deploy]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: "2.2.1"

      - name: Install deps
        run: poetry install

      - name: Run E2E tests
        run: poetry run pytest tests/e2e --url "${{ needs.lambda-deploy.outputs.api_url }}/${{ needs.lambda-deploy.outputs.alias }}"
        env:
          STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}
          PROD_API_KEY: ${{ secrets.PROD_API_KEY }}
