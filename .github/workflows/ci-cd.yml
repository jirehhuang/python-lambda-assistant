name: Continuous Integration

permissions:
  contents: read
  id-token: write
  pull-requests: write

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  FUNCTION_NAME: "python-lambda-assistant"
  PYTHON_VERSION: "3.12"
  AWS_REGION: "us-west-1"
  AWS_ACCOUNT_ID: "670469590993"
  GH_OIDC_ROLE_NAME: "github-jirehhuang-oidc-lambda-deployer"
  MEALIE_API_URL: ${{ secrets.MEALIE_API_URL }}
  MEALIE_API_KEY: ${{ secrets.MEALIE_API_KEY }}
  MEALIE_SHOPPING_LIST_ID: ${{ secrets.MEALIE_SHOPPING_LIST_ID }}
  OBSIDIAN_VAULT_OWNER: ${{ secrets.OBSIDIAN_VAULT_OWNER }}
  OBSIDIAN_VAULT_REPOSITORY: ${{ secrets.OBSIDIAN_VAULT_REPOSITORY }}
  OBSIDIAN_VAULT_TOKEN: ${{ secrets.OBSIDIAN_VAULT_TOKEN }}
  OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

jobs:
  pr-title:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: amannn/action-semantic-pull-request@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          requireScope: false

  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: lambda-deploy
      cancel-in-progress: true

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: "2.2.1"

      - name: Install deps for packaging
        run: poetry install --only main

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.GH_OIDC_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set environment variables and alias
        id: env-vars
        env:
          ENV_VARS: "MEALIE_API_URL,MEALIE_API_KEY,MEALIE_SHOPPING_LIST_ID,OBSIDIAN_VAULT_OWNER,OBSIDIAN_VAULT_REPOSITORY,OBSIDIAN_VAULT_TOKEN,OPENROUTER_API_KEY"
        run: |
          set -euo pipefail

          # Determine alias
          BRANCH="${GITHUB_REF_NAME}"
          ALIAS="staging"
          [ "$BRANCH" = "main" ] && ALIAS="prod"

          # Build compact JSON for Variables
          ENV_JSON=$(jq -n --arg alias "$ALIAS" '{ALIAS: $alias}')
          IFS=',' read -ra VARS <<< "$ENV_VARS"
          for VAR in "${VARS[@]}"; do
            VALUE=$(printenv "$VAR")
            ENV_JSON=$(echo "$ENV_JSON" | jq -c --arg k "$VAR" --arg v "$VALUE" '. + {($k): $v}')
          done

          echo "Updating Lambda environment variables..."
          aws lambda update-function-configuration \
            --function-name "${FUNCTION_NAME}" \
            --environment "Variables=$ENV_JSON"

          echo "alias=${ALIAS}" >> "$GITHUB_OUTPUT"

          echo "Waiting for Lambda update..."
          aws lambda wait function-updated --function-name "${FUNCTION_NAME}"

          echo "✅ Lambda environment variables updated."

      - name: Publish new version and update alias
        run: |
          set -euo pipefail
          ALIAS=${{ steps.env-vars.outputs.alias }}

          VERSION=$(aws lambda publish-version --function-name "${FUNCTION_NAME}" --query 'Version' --output text)

          if ! aws lambda get-alias --function-name "${FUNCTION_NAME}" --name "${ALIAS}" >/dev/null 2>&1; then
            aws lambda create-alias \
              --function-name "${FUNCTION_NAME}" \
              --name "${ALIAS}" \
              --function-version "${VERSION}"
          else
            aws lambda update-alias \
              --function-name "${FUNCTION_NAME}" \
              --name "${ALIAS}" \
              --function-version "${VERSION}"
          fi

          echo "✅ Updated ${ALIAS} alias to version ${VERSION}"

      - name: Run prod E2E tests
        run: |
          poetry install
          poetry run pytest tests/e2e --url "${{ steps.get-api-url.outputs.api_url }}/prod"
        env:
          PROD_API_KEY: ${{ secrets.PROD_API_KEY }}
